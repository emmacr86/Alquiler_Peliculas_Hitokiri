/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfazGrafica;

import CapaBL.UsuariosBL;
import Entidades.FechaIngreso;
import Entidades.Usuarios;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractButton;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Emma
 */
public class VentanaInternaUsuarios extends javax.swing.JInternalFrame {

    UsuariosBL objUsuariosBL;
    private int row;
    int IntConsecutivo = 0;

    /**
     * Creates new form VentanaInternaUsuarios
     */
    public VentanaInternaUsuarios() throws Exception {
        initComponents();
        objUsuariosBL = new UsuariosBL();
        ConsultarRegistros();

        Guardarbtn.setVisible(false);
        Ingresartbn.setVisible(false);
        Regresarbtn.setVisible(false);

        OcultarDatos();
    }

    public void ConsultarRegistros() throws Exception {
        String strbloqueado = "";
        try {

            ArrayList<Usuarios> lista;
            lista = objUsuariosBL.Listado();

            if (lista != null) {
                String col[] = {"Usuario", "Contraseña", "Identificador", "Fecha de Ingreso", "Bloqueado", "Estado"};

                DefaultTableModel tableModel = new DefaultTableModel(col, 0);

                Tabla.setModel(tableModel);

                for (int i = 0; i < lista.size(); i++) {

                    String usuario = lista.get(i).getStrUsuario();
                    String contrasena = lista.get(i).getStrContrasena();
                    int identificador = lista.get(i).getIntIdempleado();
                    String fechaIngreso = lista.get(i).getClassFechaIngreso().toString();
                    boolean bloqueado = lista.get(i).isBoolBloqueado();
                    if (bloqueado == true) {
                        strbloqueado = "Sí";
                    } else {
                        strbloqueado = "No";
                    }
                    String estado = lista.get(i).getStrEstado();
                    Object[] data = {usuario, contrasena, identificador, fechaIngreso, strbloqueado, estado}; //bloqueado
                    tableModel.addRow(data);
                }
            }

        } catch (Exception ex) {
            throw new Exception("Error");
        }
    }

    public void LimpiarRegistros() {
        Usuariotxt.setText("");
        Passwordtxt.setText("");
        Consecutivolbl.setText("");
        FechaIngresosc.setDate(null);
        GrupoBloqueadogb.clearSelection();
        Estadogb.clearSelection();
    }

    public void MostrarDatos() {
        Usuariolbl.setVisible(true);
        Contrasenalbl.setVisible(true);
        Identificadorlbl.setVisible(true);
        Fechalbl.setVisible(true);
        Bloqueadolbl.setVisible(true);
        Estadolbl.setVisible(true);

        Usuariotxt.setVisible(true);
        Passwordtxt.setVisible(true);
        Consecutivolbl.setVisible(true);
        FechaIngresosc.setVisible(true);
        Afirmativobx.setVisible(true);
        Negativobx.setVisible(true);
        Activocb.setVisible(true);
        Inactivocb.setVisible(true);
    }

    public void OcultarDatos() {
        Usuariolbl.setVisible(false);
        Contrasenalbl.setVisible(false);
        Identificadorlbl.setVisible(false);
        Fechalbl.setVisible(false);
        Bloqueadolbl.setVisible(false);
        Estadolbl.setVisible(false);

        Usuariotxt.setVisible(false);
        Passwordtxt.setVisible(false);
        Consecutivolbl.setVisible(false);
        FechaIngresosc.setVisible(false);
        Afirmativobx.setVisible(false);
        Negativobx.setVisible(false);
        Activocb.setVisible(false);
        Inactivocb.setVisible(false);
    }

    public void RegresarMenuPrincipal() {
        Eliminarbtn.setVisible(true);
        Cambiarbtn.setVisible(true);
        Nuevobtn.setVisible(true);

        Ingresartbn.setVisible(false);
        Guardarbtn.setVisible(false);
        Regresarbtn.setVisible(false);
    }

    public void setButtonGroup(String rdValue, Enumeration elements) {
        while (elements.hasMoreElements()) {
            AbstractButton button = (AbstractButton) elements.nextElement();
            if (button.getActionCommand().equals(rdValue)) {
                button.setSelected(true);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Estadogb = new javax.swing.ButtonGroup();
        GrupoBloqueadogb = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        Cambiarbtn = new javax.swing.JButton();
        Eliminarbtn = new javax.swing.JButton();
        Ingresartbn = new javax.swing.JButton();
        Estadolbl = new javax.swing.JLabel();
        Activocb = new javax.swing.JRadioButton();
        Inactivocb = new javax.swing.JRadioButton();
        Bloqueadolbl = new javax.swing.JLabel();
        Afirmativobx = new javax.swing.JRadioButton();
        Negativobx = new javax.swing.JRadioButton();
        Fechalbl = new javax.swing.JLabel();
        FechaIngresosc = new com.toedter.calendar.JDateChooser();
        Identificadorlbl = new javax.swing.JLabel();
        Passwordtxt = new javax.swing.JTextField();
        Contrasenalbl = new javax.swing.JLabel();
        Usuariotxt = new javax.swing.JTextField();
        Usuariolbl = new javax.swing.JLabel();
        Titulolbl = new javax.swing.JLabel();
        Nuevobtn = new javax.swing.JButton();
        Regresarbtn = new javax.swing.JButton();
        Guardarbtn = new javax.swing.JButton();
        Consecutivolbl = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Usuario", "Contraseña", "Identificador", "Ingreso", "Bloqueado", "Estado"
            }
        ));
        Tabla.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        Tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Tabla);

        Cambiarbtn.setText("Actualizar");
        Cambiarbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CambiarbtnMouseClicked(evt);
            }
        });

        Eliminarbtn.setText("Inactivar");
        Eliminarbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EliminarbtnMouseClicked(evt);
            }
        });

        Ingresartbn.setText("Ingresar");
        Ingresartbn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                IngresartbnMouseClicked(evt);
            }
        });

        Estadolbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Estadolbl.setText("Estado");

        Estadogb.add(Activocb);
        Activocb.setText("Activo");

        Estadogb.add(Inactivocb);
        Inactivocb.setText("Inactivo");

        Bloqueadolbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Bloqueadolbl.setText("Bloqueado");

        GrupoBloqueadogb.add(Afirmativobx);
        Afirmativobx.setText("Sí");

        GrupoBloqueadogb.add(Negativobx);
        Negativobx.setText("No");

        Fechalbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Fechalbl.setText("Fecha de Ingreso");

        Identificadorlbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Identificadorlbl.setText("Identificador");

        Contrasenalbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Contrasenalbl.setText("Contraseña");

        Usuariolbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Usuariolbl.setText("Usuario");

        Titulolbl.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Titulolbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Titulolbl.setText("Mantenimiento Usuarios");

        Nuevobtn.setText("Nuevo");
        Nuevobtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                NuevobtnMouseClicked(evt);
            }
        });

        Regresarbtn.setText("Regresar");
        Regresarbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RegresarbtnMouseClicked(evt);
            }
        });

        Guardarbtn.setText("Guardar");
        Guardarbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GuardarbtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Contrasenalbl, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(Usuariolbl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Bloqueadolbl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Estadolbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(Identificadorlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Fechalbl, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Activocb)
                                        .addGap(18, 18, 18)
                                        .addComponent(Inactivocb))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Afirmativobx)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Negativobx))
                                    .addComponent(Passwordtxt, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                                    .addComponent(Usuariotxt, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                                    .addComponent(FechaIngresosc, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                                    .addComponent(Consecutivolbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Nuevobtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Ingresartbn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Eliminarbtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Cambiarbtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Guardarbtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Regresarbtn)))
                        .addContainerGap())))
            .addComponent(Titulolbl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Titulolbl)
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Usuariolbl)
                    .addComponent(Usuariotxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Contrasenalbl)
                    .addComponent(Passwordtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Identificadorlbl)
                    .addComponent(Consecutivolbl))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Fechalbl, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FechaIngresosc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Bloqueadolbl)
                    .addComponent(Afirmativobx)
                    .addComponent(Negativobx))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Estadolbl)
                    .addComponent(Activocb)
                    .addComponent(Inactivocb))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Ingresartbn)
                    .addComponent(Cambiarbtn)
                    .addComponent(Eliminarbtn)
                    .addComponent(Nuevobtn)
                    .addComponent(Guardarbtn)
                    .addComponent(Regresarbtn))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void IngresartbnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IngresartbnMouseClicked
        try {
            int consecutivo = objUsuariosBL.Consecutivo() + 1;
            Usuarios objUsuarios = new Usuarios();
            FechaIngreso objFechaIngreso = null;

            if (FechaIngresosc.getCalendar() != null) {

                int dia = FechaIngresosc.getCalendar().get(Calendar.DAY_OF_MONTH);
                int mes = FechaIngresosc.getCalendar().get(Calendar.MONTH) + 1;
                int anno = FechaIngresosc.getCalendar().get(Calendar.YEAR);

                objFechaIngreso = new FechaIngreso(dia, mes, anno);

                if (objFechaIngreso != null) {

                    objUsuarios.setClassFechaIngreso(objFechaIngreso);
                    objUsuarios.setIntIdempleado(Integer.parseInt(Consecutivolbl.getText()));

                    if (Usuariotxt.getText().equals("")) {
                        JOptionPane.showMessageDialog(this, "Espacio de Usuario vacío", "Error", 2);
                    } else {
                        objUsuarios.setStrUsuario(Usuariotxt.getText());
                        if (Passwordtxt.getText().equals("")) {
                            JOptionPane.showMessageDialog(this, "Espacio de Contraseña vacío", "Error", 2);
                        } else {
                            objUsuarios.setStrContrasena(Passwordtxt.getText());
                            Afirmativobx.setActionCommand("Sí");
                            Negativobx.setActionCommand("No");
                            if (Afirmativobx.isSelected() == false & Negativobx.isSelected() == false) {
                                JOptionPane.showMessageDialog(this, "Selección de bloqueado vacío", "Error", 2);
                            } else {
                                if (GrupoBloqueadogb.getSelection().getActionCommand().equals("Sí")) {
                                    objUsuarios.setBoolBloqueado(true);
                                } else {
                                    objUsuarios.setBoolBloqueado(false);
                                }
                                Activocb.setActionCommand(Activocb.getText());
                                Inactivocb.setActionCommand(Inactivocb.getText());
                                if (Activocb.isSelected() == false & Inactivocb.isSelected() == false) {
                                    JOptionPane.showMessageDialog(this, "Selección de estado vacío", "Error", 2);
                                } else {
                                    objUsuarios.setStrEstado(Estadogb.getSelection().getActionCommand());
                                    try {
                                        objUsuariosBL.Insertar(objUsuarios);
                                        objUsuariosBL.grabarArchivoUsuarios();
                                        ConsultarRegistros();
                                        LimpiarRegistros();
                                        RegresarMenuPrincipal();
                                        OcultarDatos();
                                    } catch (Exception ex) {
                                        Logger.getLogger(VentanaInternaUsuarios.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Espacio de fecha vacío", "Error", 2);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Espacio de fecha vacío", "Error", 2);
            }
        } catch (Exception ex) {
            Logger.getLogger(VentanaInternaUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_IngresartbnMouseClicked

    private void TablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMouseClicked
        row = Tabla.rowAtPoint(evt.getPoint());
    }//GEN-LAST:event_TablaMouseClicked

    private void EliminarbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EliminarbtnMouseClicked
        try {
            int identificador = objUsuariosBL.Listado().get(row).getIntIdempleado();
            String usuario = objUsuariosBL.Listado().get(row).getStrUsuario();

            VentanaInternaUsuarios objVentanaInternaUsuarios = new VentanaInternaUsuarios();

            if ("Inactivo".equals(objUsuariosBL.Listado().get(row).getStrEstado())) {
                JOptionPane.showMessageDialog(this, "Usuario inactivo anteriormente", "Mensaje", 2);
            } else {

                String botones[] = {"Sí", "No"};
                int eleccion = JOptionPane.showOptionDialog(objVentanaInternaUsuarios, "¿Desea inactivar al empleado " + usuario + "?", "Inactivar empleado", 0, 0, null, botones, this);
                if (eleccion == JOptionPane.YES_OPTION) {

                    objUsuariosBL.Eliminar(usuario);
                    objUsuariosBL.grabarArchivoUsuarios();
                    ConsultarRegistros();

                } else {

                    if (eleccion == JOptionPane.NO_OPTION) {
                        System.out.println("Opcion Inactivo cancelado");
                    }
                }
            }

        } catch (Exception ex) {
            Logger.getLogger(VentanaInternaClientes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_EliminarbtnMouseClicked

    private void RegresarbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RegresarbtnMouseClicked
        LimpiarRegistros();

        Eliminarbtn.setVisible(true);
        Cambiarbtn.setVisible(true);
        Nuevobtn.setVisible(true);

        Ingresartbn.setVisible(false);
        Guardarbtn.setVisible(false);
        Regresarbtn.setVisible(false);

        OcultarDatos();
    }//GEN-LAST:event_RegresarbtnMouseClicked

    private void NuevobtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NuevobtnMouseClicked
        try {
            Regresarbtn.setVisible(true);
            Ingresartbn.setVisible(true);

            Eliminarbtn.setVisible(false);
            Cambiarbtn.setVisible(false);
            Nuevobtn.setVisible(false);

            int consecutivo = objUsuariosBL.Consecutivo() + 1;
            Consecutivolbl.setText(String.valueOf(consecutivo));

            MostrarDatos();
        } catch (Exception ex) {
            Logger.getLogger(VentanaInternaUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_NuevobtnMouseClicked

    private void CambiarbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CambiarbtnMouseClicked
        try {
            Guardarbtn.setVisible(true);
            Ingresartbn.setVisible(false);
            Eliminarbtn.setVisible(false);
            Cambiarbtn.setVisible(false);
            Regresarbtn.setVisible(true);
            Nuevobtn.setVisible(false);

            MostrarDatos();
            Usuarios objUsuarios = new Usuarios();

            String identificador = objUsuariosBL.Listado().get(row).getStrUsuario();

            Usuariotxt.setText(objUsuariosBL.ConsultaPorID(identificador).getStrUsuario());
            Passwordtxt.setText(objUsuariosBL.ConsultaPorID(identificador).getStrContrasena());
            Consecutivolbl.setText(String.valueOf(objUsuariosBL.ConsultaPorID(identificador).getIntIdempleado()));
            String fechaIngreso = objUsuariosBL.ConsultaPorID(identificador).getClassFechaIngreso().toString();
            int dia = objUsuariosBL.ConsultaPorID(identificador).getClassFechaIngreso().getIntDia();
            int mes = objUsuariosBL.ConsultaPorID(identificador).getClassFechaIngreso().getIntMes() - 1;
            int anno = objUsuariosBL.ConsultaPorID(identificador).getClassFechaIngreso().getIntAno();

            Calendar objCalendar = Calendar.getInstance();
            objCalendar.set(anno, mes, dia);
            FechaIngresosc.setCalendar(objCalendar);

            if ("True".equals(String.valueOf(objUsuariosBL.ConsultaPorID(identificador).isBoolBloqueado()))) {
                setButtonGroup("Sí", GrupoBloqueadogb.getElements());
            } else {
                setButtonGroup("No", GrupoBloqueadogb.getElements());
            }

            if ("Activo".equals(objUsuariosBL.ConsultaPorID(identificador).getStrEstado())) {
                setButtonGroup("Activo", Estadogb.getElements());
            } else {
                setButtonGroup("Inactivo", Estadogb.getElements());
            }

            ConsultarRegistros();
        } catch (Exception ex) {
            Logger.getLogger(VentanaInternaEmpleados.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CambiarbtnMouseClicked

    private void GuardarbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GuardarbtnMouseClicked
        Usuarios objUsuarios = new Usuarios();
        FechaIngreso objFechaIngreso = null;

        if (FechaIngresosc.getCalendar() != null) {

            int dia = FechaIngresosc.getCalendar().get(Calendar.DAY_OF_MONTH);
            int mes = FechaIngresosc.getCalendar().get(Calendar.MONTH) + 1;
            int anno = FechaIngresosc.getCalendar().get(Calendar.YEAR);

            objFechaIngreso = new FechaIngreso(dia, mes, anno);

            if (objFechaIngreso != null) {
 
                objUsuarios.setIntIdempleado(Integer.parseInt(Consecutivolbl.getText()));
                objUsuarios.setClassFechaIngreso(objFechaIngreso);
                Afirmativobx.setActionCommand("Sí");
                Negativobx.setActionCommand("No");
                if (GrupoBloqueadogb.getSelection().getActionCommand().equals("Sí")) {
                    objUsuarios.setBoolBloqueado(true);
                } else {
                    objUsuarios.setBoolBloqueado(false);
                }
                Activocb.setActionCommand(Activocb.getText());
                Inactivocb.setActionCommand(Inactivocb.getText());
                objUsuarios.setStrEstado(Estadogb.getSelection().getActionCommand());

                if (Usuariotxt.getText().equals("")) {
                    JOptionPane.showMessageDialog(this, "Espacio de usuario vacío", "Error", 2);
                } else {
                    objUsuarios.setStrUsuario(Usuariotxt.getText());
                    if (Passwordtxt.getText().equals("")) {
                        JOptionPane.showMessageDialog(this, "Espacio de contraseña vacío", "Error", 2);
                    } else {
                        objUsuarios.setStrContrasena(Passwordtxt.getText());
                        try {
                            objUsuariosBL.Actualizar(objUsuarios);
                            objUsuariosBL.grabarArchivoUsuarios();
                            ConsultarRegistros();
                            LimpiarRegistros();
                            RegresarMenuPrincipal();
                            OcultarDatos();
                        } catch (Exception ex) {
                            Logger.getLogger(VentanaInternaEmpleados.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Espacio de fecha vacío", "Error", 2);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Espacio de fecha vacío", "Error", 2);
        }
    }//GEN-LAST:event_GuardarbtnMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton Activocb;
    private javax.swing.JRadioButton Afirmativobx;
    private javax.swing.JLabel Bloqueadolbl;
    private javax.swing.JButton Cambiarbtn;
    private javax.swing.JLabel Consecutivolbl;
    private javax.swing.JLabel Contrasenalbl;
    private javax.swing.JButton Eliminarbtn;
    private javax.swing.ButtonGroup Estadogb;
    private javax.swing.JLabel Estadolbl;
    private com.toedter.calendar.JDateChooser FechaIngresosc;
    private javax.swing.JLabel Fechalbl;
    private javax.swing.ButtonGroup GrupoBloqueadogb;
    private javax.swing.JButton Guardarbtn;
    private javax.swing.JLabel Identificadorlbl;
    private javax.swing.JRadioButton Inactivocb;
    private javax.swing.JButton Ingresartbn;
    private javax.swing.JRadioButton Negativobx;
    private javax.swing.JButton Nuevobtn;
    private javax.swing.JTextField Passwordtxt;
    private javax.swing.JButton Regresarbtn;
    private javax.swing.JTable Tabla;
    private javax.swing.JLabel Titulolbl;
    private javax.swing.JLabel Usuariolbl;
    private javax.swing.JTextField Usuariotxt;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
